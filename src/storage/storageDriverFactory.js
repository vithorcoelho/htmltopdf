const LocalStorageDriver = require('./drivers/localStorageDriver');
const S3StorageDriver = require('./drivers/s3StorageDriver');

/**
 * Factory para criar inst√¢ncias de drivers de storage
 */
class StorageDriverFactory {
  /**
   * Cria uma inst√¢ncia do driver de storage baseado na configura√ß√£o
   * @param {string} driverType - Tipo do driver ('local' ou 's3')
   * @param {object} config - Configura√ß√µes espec√≠ficas do driver
   * @returns {BaseStorageDriver} - Inst√¢ncia do driver
   */
  static createDriver(driverType = null, config = {}) {
    // Se n√£o especificado, usar vari√°vel de ambiente ou padr√£o
    const type = driverType || process.env.STORAGE_DRIVER || 'local';
    
    console.log(`üîß Inicializando driver de storage: ${type}`);
    
    switch (type.toLowerCase()) {
      case 'local':
      case 'storage':
        return new LocalStorageDriver(config);
        
      case 's3':
      case 'aws':
        return new S3StorageDriver(config);
        
      default:
        console.warn(`‚ö†Ô∏è Driver de storage desconhecido: ${type}. Usando 'local' como padr√£o.`);
        return new LocalStorageDriver(config);
    }
  }

  /**
   * Lista os drivers dispon√≠veis
   * @returns {Array<string>} - Lista de drivers dispon√≠veis
   */
  static getAvailableDrivers() {
    return ['local', 's3'];
  }

  /**
   * Valida se um driver est√° dispon√≠vel
   * @param {string} driverType - Tipo do driver
   * @returns {boolean} - Se o driver est√° dispon√≠vel
   */
  static isDriverAvailable(driverType) {
    return this.getAvailableDrivers().includes(driverType.toLowerCase());
  }

  /**
   * Valida as configura√ß√µes necess√°rias para um driver
   * @param {string} driverType - Tipo do driver
   * @returns {object} - Resultado da valida√ß√£o
   */
  static validateDriverConfig(driverType) {
    const type = driverType.toLowerCase();
    const errors = [];
    const warnings = [];

    switch (type) {
      case 'local':
      case 'storage':
        // Verificar se o diret√≥rio de storage √© v√°lido
        const storageDir = process.env.PDF_STORAGE_DIR || './pdfs';
        if (!storageDir) {
          warnings.push('PDF_STORAGE_DIR n√£o definido, usando "./pdfs" como padr√£o');
        }
        break;

      case 's3':
      case 'aws':
        // Verificar credenciais AWS
        if (!process.env.AWS_ACCESS_KEY_ID) {
          errors.push('AWS_ACCESS_KEY_ID √© obrigat√≥rio para o driver S3');
        }
        if (!process.env.AWS_SECRET_ACCESS_KEY) {
          errors.push('AWS_SECRET_ACCESS_KEY √© obrigat√≥rio para o driver S3');
        }
        if (!process.env.AWS_S3_BUCKET) {
          warnings.push('AWS_S3_BUCKET n√£o definido, usando "htmltopdf-storage" como padr√£o');
        }
        if (!process.env.AWS_REGION) {
          warnings.push('AWS_REGION n√£o definido, usando "us-east-1" como padr√£o');
        }
        break;

      default:
        errors.push(`Driver desconhecido: ${driverType}`);
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}

module.exports = StorageDriverFactory;
